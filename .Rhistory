continent<-laply(dummy, '[[', 1)
country.code<-laply(dummy, '[[', 4)
country.name<-laply(dummy, '[[', 5)
df<-data.frame(Country.Code=country.code, Country.Name=country.name, Continent.Abr=continent)
df$Country.Code<-as.numeric(df$Country.Code)
df$Continent<-NA
df$Continent[which(df$Continent.Abr=="AF")]<-"Africa"
df$Continent[which(df$Continent.Abr=="AS")]<-"Asia"
df$Continent[which(df$Continent.Abr=="EU")]<-"Europe"
df$Continent[which(df$Continent.Abr=="NA")]<-"North.America"
df$Continent[which(df$Continent.Abr=="SA")]<-"South.America"
df$Continent[which(df$Continent.Abr=="OC")]<-"Oceania"
df$Continent[which(df$Continent.Abr=="AN")]<-"Antarctica"
merge.by<-"Country.Code"
print(paste("Both data.frames share a unqiue column name:", merge.by %in% names(pop) & merge.by %in% names(df), sep=" "))
test<-merge(pop, df, by=merge.by)
test<-subset(test, select=-Continent.Abr)
test<-subset(test, select=-Country.Name)
test<-subset(test, select=-Note)
test<-subset(test, select=c(23, 1:22))
pop<-test
remove(test)
save(pop, file="pop.rsav")
merge.by<-"Country.Code"
print(paste("Both data.frames share a unqiue column name:", merge.by %in% names(growth) & merge.by %in% names(df), sep=" "))
test<-merge(growth, df, by=merge.by)
test<-subset(test, select=-Continent.Abr)
test<-subset(test, select=-Country.Name)
test<-subset(test, select=-Note)
test<-subset(test, select=c(22, 1:21))
growth<-test
remove(test)
save(growth, file="growth.rsav")
## get data for a couple of well known megacities...
get<-c("Karachi", "Delhi", "Dhaka", "Jakarta", "Krung Thep (Bangkok)", "Lagos", "Kinshasa")
## compute decadal growth rates
# even decades
test<-pop[, 1:7]
test$g50.60<-(pop$X1960-pop$X1950)/pop$X1950*100
test$g60.70<-(pop$X1970-pop$X1960)/pop$X1960*100
test$g70.80<-(pop$X1980-pop$X1970)/pop$X1970*100
test$g80.90<-(pop$X1990-pop$X1980)/pop$X1980*100
test$g90.00<-(pop$X2000-pop$X1990)/pop$X1990*100
test$g00.10<-(pop$X2010-pop$X2000)/pop$X2000*100
test$g10.20<-(pop$X2020-pop$X2010)/pop$X2010*100
test[test$Urban.Agglomeration %in% get, ]
growth.decadal<-test
remove(test)
save(growth.decadal, file="growth.decadal.rsav")
# odd decades
test<-pop[, 1:7]
test$g55.65<-(pop$X1965-pop$X1955)/pop$X1955*100
test$g65.75<-(pop$X1975-pop$X1965)/pop$X1965*100
test$g75.85<-(pop$X1985-pop$X1975)/pop$X1975*100
test$g85.95<-(pop$X1995-pop$X1985)/pop$X1985*100
test$g95.05<-(pop$X2005-pop$X1995)/pop$X1995*100
test$g05.15<-(pop$X2015-pop$X2005)/pop$X2005*100
test$g15.25<-(pop$X2025-pop$X2015)/pop$X2015*100
test[test$Urban.Agglomeration %in% get, ]
growth.decadal2<-test
remove(test)
save(growth.decadal2, file="growth.decadal2.rsav")
## melt for ggplot()
df1<-melt(pop, id.vars=c(1:7))
sum(is.na(df1))
## assign pretty column names
get<-levels(df1$variable)
dummy<-strsplit(get, split="X")
test<-laply(dummy, '[[', 2)
df1$variable<-factor(df1$variable, labels=test)
## check for NA's
sum(is.na(df1))          # zero NAs
df1[which(is.na(df1)), ] # zero NAs
cc<-complete.cases(df1)  # check for missing values...
sum(cc)==dim(df1)[1]     # zero missing values.
## bin growth rates by quantile
df1$bin<-cut(df1$value, breaks=quantile(df1$value), include.lowest=TRUE)
df1$bin.name<-factor(df1$bin, labels=c("1st quartile","2nd quartile","3rd quartile","4th quartile")) # assign pretty names
names(df1)[8:11]<-c("Year","Pop.","Pop.Bin","Pop.Quartile")
pop.melt<-df1
## check for NAs and complete cases
NAs<-sum(is.na(df1)); NAs           # count NA's
if (NAs>0) df1[which(is.na(df1)), ] # Show NA's, if any.
cc<-complete.cases(df1) # check for missing values...
all(cc)                 # Given a set of logical vectors, are all of the values true?
## repeat for growth data
df2<-melt(growth, id.vars=c(1:7))
get<-levels(df2$variable)
dummy<-strsplit(get, split="X")
period<-laply(dummy, '[[', 2)
period<-gsub("[.]", "-", period)
## bin growth rates by quantile
df2$variable<-factor(df2$variable, labels=period)
df2$bin<-cut(df2$value, breaks=quantile(df2$value), include.lowest=TRUE)
df2$bin.name<-factor(df2$bin, labels=c("1st quartile","2nd quartile","3rd quartile","4th quartile"))
names(df2)[8:11]<-c("Period","Growth","Growth.Bin","Growth.Quartile")
growth.melt<-df2
## save
save(pop.melt, file="pop.melt.rsav")
save(growth.melt, file="growth.melt.rsav")
# conform population data and growth rate data for a given year
dummy<-strsplit(as.character(df2$Period), split="-")  # year ending XXXX
df2$Year<-laply(dummy, "[[", 2)
str(df2)
# check for NAs and complete cases
NAs<-sum(is.na(df2)); NAs           # count NA's
if (NAs>0) df1[which(is.na(df2)), ] # Show NA's, if any.
cc<-complete.cases(df2) # check for missing values...
all(cc)                 # Given a set of logical vectors, are all of the values true?
merge.by<-c("Continent", "Country.Code", "Country", "City.Code", "Urban.Agglomeration", "Latitude", "Longitude", "Year")
print(paste("Both data.frames share a unqiue column name:", merge.by %in% names(df1) & merge.by %in% names(df2), sep=" "))
cities<-merge(df1, df2, by=merge.by)
check<-function(df){
NAs<-sum(is.na(df))
print(paste("NAs:", NAs)) # count NA's
if (NAs>0) df1[which(is.na(df)), ] # Show NA's, if any.
cc<-complete.cases(df)  # check for missing values...
print(paste("Complete Cases:", all(cc)))  # Given a set of logical vectors, are all of the values true?
}
check(cities)
## group by geography... (or try clustering by lat-long attributes)
tropics<-subset(cities, Latitude>=-23.45 & Latitude <=23.45)
subtropics<-subset(cities, Latitude>=-38 & Latitude <=-23.45 | Latitude>=23.45 & Latitude <=38)
north<-subset(cities, Latitude>38)
## add region attribute to cities
cities$region<-NA
t<-which(cities$Latitude >= -23.45 & cities$Latitude <= 23.45)
cities$region[t]<-"Tropics"
st<-which(cities$Latitude>= -38 & cities$Latitude < -23.45 | cities$Latitude > 23.45 & cities$Latitude <= 38)
cities$region[st]<-"Subtropics"
n<-which(cities$Latitude > 38)
cities$region[n]<-"North"
cities$region<-as.factor(cities$region)
# ## group countries by UN economic classifications
# D1<-c("Andorra", "Australia", "Bermuda", "Canada", "Iceland", "Israel", "Liechtenstein", "Monaco", "New Zealand", "Norway", "Korea (South)", "San Marino", "Singapore", "Switzerland", "Taiwan")
#
# D2:  "Albania", "Algeria", "Anguilla", "Antigua and Barbuda", "Argentina", "Aruba", "Bahamas", "Bahrain", "Barbados", "Belize", "Bolivia", "Bosnia and Herzegovina", "Botswana", "Brazil", "British Virgin Islands", "Brunei Darussalam", "Bulgaria", "Cameroon", "Cayman Islands", "Chile", "Colombia", "Cook Islands", "Costa Rica", "Cote d'Ivoire", "Croatia", "Cuba"," Czechoslovakia (Former)", "Korea (North)", "Dominica", "Dominican Republic", "Ecuador", "Egypt", "El Salvador", "Fiji", "French Polynesia", "Gabon", "Ghana", "Grenada", "Guatemala", "Haiti", "Honduras", "Indonesia", "Iran", "Iraq", "Jamaica", "Jordan", "Kenya", "Kuwait", "Lebanon", "Libyan Arab Jamahiriya", "Malaysia", Marshall Islands, Mauritius, Mexico, Micronesia, Mongolia, Montserrat , Morocco, Namibia, Nauru, Netherlands Antilles, New Caledonia, Nicaragua, Nigeria, Occupied Palestine, Oman, Pakistan, Palau, Panama, Papua New Guinea, Paraguay, Peru, Philippines, Puerto Rico, Qatar, Romania, Saint Kitts-Nevis, Saint Lucia, Saint Vincent and the Grenadines, Saudi Arabia, Serbia and Montenegro, Seychelles, Somalia, South Africa, Sri Lanka, Sudan, Suriname, Swaziland, Syria, Macedonia, Thailand, Tonga, Trinidad and Tobago, Tunisia, Turkey, Turks and Caicos Islands, United Arab Emirates, Uruguay, Venezuela, Vietnam, Zanzibar, Zimbabwe
#
# D3:	Afghanistan, Angola, Bangladesh, Benin, Bhutan, Burkina Faso, Burundi, Cambodia, Cape Verde, Central African Republic, Chad, Comoros, Congo (Brazzaville), Congo (Kinshasa), Djibouti, Equatorial Guinea, Eritrea, Ethiopia, Gambia, Guinea, Guinea-Bissau, Guyana, Kiribati, Laos, Lesotho, Liberia, Madagascar, Malawi, Maldives, Mali, Mauritania, Mozambique, Myanmar, Nepal, Niger, Rwanda, Samoa, Sao Tome and Principe, Senegal, Sierra Leone, Solomon Islands, Timor-Leste, Togo, Tuvalu, Uganda, Tanzania, Vanuatu, Yemen, Zambia
#
# EU:	Austria, Belgium, Cyprus, Czech Republic, Denmark, Finland, France, Germany, Greece, Hungary, Ireland, Italy, Luxembourg, Malta, Netherlands, Poland, Portugal, Slovakia, Slovenia, Spain, Sweden, United Kingdom
#
# FSU:	Armenia, Azerbaijan, Belarus, Estonia, Georgia, Kazakhstan, Kyrgyzstan, Latvia, Lithuania, Moldova (Republic of), Russian Federation, Tajikistan, Turkmenistan, Ukraine, USSR (Former), Uzbekistan
#
## summarize population growth by decade
d50<-which(cities$Period %in% c("1950-1955", "1955-1960"))
d60<-which(cities$Period %in% c("1960-1965", "1965-1970"))
d70<-which(cities$Period %in% c("1970-1975", "1975-1980"))
d80<-which(cities$Period %in% c("1980-1985", "1985-1990"))
d90<-which(cities$Period %in% c("1990-1995", "1995-2000"))
d00<-which(cities$Period %in% c("2000-2005", "2005-2010"))
d10<-which(cities$Period %in% c("2010-2015", "2015-2020"))
d20<-which(cities$Period %in% c("2020-2025"))
cities$decade<-NA
cities$decade[d50]<-"Fifties"
cities$decade[d60]<-"Sixties"
cities$decade[d70]<-"Seventies"
cities$decade[d80]<-"Eighties"
cities$decade[d90]<-"Nineties"
cities$decade[d00]<-"Oughts"
cities$decade[d10]<-"Twenty-Teens"
cities$decade[d20]<-"Twenty-Twenties"
# summarize population growth by epoch
e1<-which(cities$Period %in% c("1950-1955", "1955-1960", "1960-1965", "1965-1970", "1970-1975"))
e2<-which(cities$Period %in% c("1975-1980", "1980-1985", "1985-1990", "1990-1995", "1995-2000"))
e3<-which(cities$Period %in% c("2000-2005", "2005-2010", "2010-2015", "2015-2020", "2020-2025"))
cities$epoch<-NA
cities$epoch[e1]<-"1950-1975"
cities$epoch[e2]<-"1975-2000"
cities$epoch[e3]<-"2000-2025"
epochal<-ddply(cities, .(Country.Code, Country, City.Code, Urban.Agglomeration, Latitude, Longitude, epoch), summarize, End.Pop.=Pop.[5], Annual.Growth=(Pop.[5]-Pop.[1])/Pop.[1]*100/25, Period.Growth= (Pop.[5]-Pop.[1])/Pop.[1]*100)
check(epochal) # check for NAs and complete cases
epochal<-na.omit(epochal)
epochal$epoch<-as.factor(epochal$epoch)
epochal$Period.Growth.Bin<-cut(epochal$Period.Growth, breaks=quantile(epochal$Period.Growth), include.lowest=TRUE)
epochal$Period.Growth.Quartile<-factor(epochal$Period.Growth.Bin, labels=c("1st quartile","2nd quartile","3rd quartile","4th quartile"))
check(epochal) # check for NAs and complete cases
View(cities)
filepath<-"~/github/Rcommands/"
## read-in csv files from NRLDC html data scapring (Chris Tan and Myf March 2014)
options(stringsAsFactors=FALSE)
## Load libraries
library(knitr)    # create RMD documents
library(plyr)     # ddply...
library(reshape2) # melt...
library(ggplot2)  # plots
library(scales)   # used in ggplot()
library(xlsx)     # read excel files
library(sm)       # density plots
# load("growth.rsav")         # 5-yr average population growth in cities w. pop > 750k
# load("growth.melt.rsav")    # ""
# load("pop.rsav")            # 5-yr average population in cities w. pop > 750k
# load("pop.melt.rsav")       # ""
# load("decadal.growth.rsav") # computed decadal population growth ('50-60, ..., '10-20)
# load("decadal.growth2.rsav")# computed decadal population growth ('55-65, ..., '15-25)
# load("cities") # synthesized population and growth rate data for global cities with pop > 750k
# load("epochal") # "cities" summarized by 25-yr epoch
## Import data
## United Nations, Department of Economic and Social Affairs, Population Division
## World Urbanization Prospects: The 2011 Revision
# Average Annual Rate of Change of Urban Agglomerations with 750,000 Inhabitants or More in 2011, by Country, 1950-2025 (per cent)
growth=read.xlsx(file="UN_2011_Growth_Rate_Cities_Over_750k.xlsx",
sheetName="GROWTH-RATE-CITIES",
as.data.frame=TRUE,header=TRUE,check.names=TRUE,
startRow=13)
# Population of urban agglomerations with 750,00 inhabitants or more, 1950-2025
pop=read.xlsx(file="UN_2011_Population_Cities_Over_750k.xlsx",
sheetName="CITIES-OVER-750K",
as.data.frame=TRUE,header=TRUE,check.names=TRUE,
startRow=13, endRow=646, colIndex=c(1:23))
# match city/country to continent
countries<-scan(file="countrylist.txt",
what="charachter", sep="\n",
blank.lines.skip=TRUE)
dummy<-strsplit(countries, split=" ")
continent<-laply(dummy, '[[', 1)
country.code<-laply(dummy, '[[', 4)
country.name<-laply(dummy, '[[', 5)
df<-data.frame(Country.Code=country.code, Country.Name=country.name, Continent.Abr=continent)
df$Country.Code<-as.numeric(df$Country.Code)
df$Continent<-NA
df$Continent[which(df$Continent.Abr=="AF")]<-"Africa"
df$Continent[which(df$Continent.Abr=="AS")]<-"Asia"
df$Continent[which(df$Continent.Abr=="EU")]<-"Europe"
df$Continent[which(df$Continent.Abr=="NA")]<-"North.America"
df$Continent[which(df$Continent.Abr=="SA")]<-"South.America"
df$Continent[which(df$Continent.Abr=="OC")]<-"Oceania"
df$Continent[which(df$Continent.Abr=="AN")]<-"Antarctica"
# merge operation
merge.by<-"Country.Code"
print(paste("Both data.frames share a unqiue column name:", merge.by %in% names(pop) & merge.by %in% names(df), sep=" "))
test<-merge(pop, df, by=merge.by)
test<-subset(test, select=-Continent.Abr)
test<-subset(test, select=-Country.Name)
test<-subset(test, select=-Note)
test<-subset(test, select=c(23, 1:22))
pop<-test
remove(test)
save(pop, file="pop.rsav")
merge.by<-"Country.Code"
print(paste("Both data.frames share a unqiue column name:", merge.by %in% names(growth) & merge.by %in% names(df), sep=" "))
test<-merge(growth, df, by=merge.by)
test<-subset(test, select=-Continent.Abr)
test<-subset(test, select=-Country.Name)
test<-subset(test, select=-Note)
test<-subset(test, select=c(22, 1:21))
growth<-test
remove(test)
save(growth, file="growth.rsav")
## get data for a couple of well known megacities...
get<-c("Karachi", "Delhi", "Dhaka", "Jakarta", "Krung Thep (Bangkok)", "Lagos", "Kinshasa")
## compute decadal growth rates
# even decades
test<-pop[, 1:7]
test$g50.60<-(pop$X1960-pop$X1950)/pop$X1950*100
test$g60.70<-(pop$X1970-pop$X1960)/pop$X1960*100
test$g70.80<-(pop$X1980-pop$X1970)/pop$X1970*100
test$g80.90<-(pop$X1990-pop$X1980)/pop$X1980*100
test$g90.00<-(pop$X2000-pop$X1990)/pop$X1990*100
test$g00.10<-(pop$X2010-pop$X2000)/pop$X2000*100
test$g10.20<-(pop$X2020-pop$X2010)/pop$X2010*100
test[test$Urban.Agglomeration %in% get, ]
growth.decadal<-test
remove(test)
save(growth.decadal, file="growth.decadal.rsav")
# odd decades
test<-pop[, 1:7]
test$g55.65<-(pop$X1965-pop$X1955)/pop$X1955*100
test$g65.75<-(pop$X1975-pop$X1965)/pop$X1965*100
test$g75.85<-(pop$X1985-pop$X1975)/pop$X1975*100
test$g85.95<-(pop$X1995-pop$X1985)/pop$X1985*100
test$g95.05<-(pop$X2005-pop$X1995)/pop$X1995*100
test$g05.15<-(pop$X2015-pop$X2005)/pop$X2005*100
test$g15.25<-(pop$X2025-pop$X2015)/pop$X2015*100
test[test$Urban.Agglomeration %in% get, ]
growth.decadal2<-test
remove(test)
save(growth.decadal2, file="growth.decadal2.rsav")
## START HERE if loading previously saved dataframes....
# load("pop.rsav")
# load("growth.rsav")
## melt for ggplot()
df1<-melt(pop, id.vars=c(1:7))
sum(is.na(df1))
## assign pretty column names
get<-levels(df1$variable)
dummy<-strsplit(get, split="X")
test<-laply(dummy, '[[', 2)
df1$variable<-factor(df1$variable, labels=test)
## check for NA's
sum(is.na(df1))          # zero NAs
df1[which(is.na(df1)), ] # zero NAs
cc<-complete.cases(df1)  # check for missing values...
sum(cc)==dim(df1)[1]     # zero missing values.
## bin growth rates by quantile
df1$bin<-cut(df1$value, breaks=quantile(df1$value), include.lowest=TRUE)
df1$bin.name<-factor(df1$bin, labels=c("1st quartile","2nd quartile","3rd quartile","4th quartile")) # assign pretty names
names(df1)[8:11]<-c("Year","Pop.","Pop.Bin","Pop.Quartile")
pop.melt<-df1
## check for NAs and complete cases
NAs<-sum(is.na(df1)); NAs           # count NA's
if (NAs>0) df1[which(is.na(df1)), ] # Show NA's, if any.
cc<-complete.cases(df1) # check for missing values...
all(cc)                 # Given a set of logical vectors, are all of the values true?
## repeat for growth data
df2<-melt(growth, id.vars=c(1:7))
get<-levels(df2$variable)
dummy<-strsplit(get, split="X")
period<-laply(dummy, '[[', 2)
period<-gsub("[.]", "-", period)
## bin growth rates by quantile
df2$variable<-factor(df2$variable, labels=period)
df2$bin<-cut(df2$value, breaks=quantile(df2$value), include.lowest=TRUE)
df2$bin.name<-factor(df2$bin, labels=c("1st quartile","2nd quartile","3rd quartile","4th quartile"))
names(df2)[8:11]<-c("Period","Growth","Growth.Bin","Growth.Quartile")
growth.melt<-df2
## save
save(pop.melt, file="pop.melt.rsav")
save(growth.melt, file="growth.melt.rsav")
# conform population data and growth rate data for a given year
dummy<-strsplit(as.character(df2$Period), split="-")  # year ending XXXX
df2$Year<-laply(dummy, "[[", 2)
str(df2)
# check for NAs and complete cases
NAs<-sum(is.na(df2)); NAs           # count NA's
if (NAs>0) df1[which(is.na(df2)), ] # Show NA's, if any.
cc<-complete.cases(df2) # check for missing values...
all(cc)                 # Given a set of logical vectors, are all of the values true?
# MERGE
merge.by<-c("Continent", "Country.Code", "Country", "City.Code", "Urban.Agglomeration", "Latitude", "Longitude", "Year")
print(paste("Both data.frames share a unqiue column name:", merge.by %in% names(df1) & merge.by %in% names(df2), sep=" "))
cities<-merge(df1, df2, by=merge.by)
# check for NAs and complete cases
check<-function(df){
NAs<-sum(is.na(df))
print(paste("NAs:", NAs)) # count NA's
if (NAs>0) df1[which(is.na(df)), ] # Show NA's, if any.
cc<-complete.cases(df)  # check for missing values...
print(paste("Complete Cases:", all(cc)))  # Given a set of logical vectors, are all of the values true?
}
# apply the function
check(cities)
## group by geography... (or try clustering by lat-long attributes)
tropics<-subset(cities, Latitude>=-23.45 & Latitude <=23.45)
subtropics<-subset(cities, Latitude>=-38 & Latitude <=-23.45 | Latitude>=23.45 & Latitude <=38)
north<-subset(cities, Latitude>38)
## add region attribute to cities
cities$region<-NA
t<-which(cities$Latitude >= -23.45 & cities$Latitude <= 23.45)
cities$region[t]<-"Tropics"
st<-which(cities$Latitude>= -38 & cities$Latitude < -23.45 | cities$Latitude > 23.45 & cities$Latitude <= 38)
cities$region[st]<-"Subtropics"
n<-which(cities$Latitude > 38)
cities$region[n]<-"North"
cities$region<-as.factor(cities$region)
# ## group countries by UN economic classifications
# D1<-c("Andorra", "Australia", "Bermuda", "Canada", "Iceland", "Israel", "Liechtenstein", "Monaco", "New Zealand", "Norway", "Korea (South)", "San Marino", "Singapore", "Switzerland", "Taiwan")
#
# D2:  "Albania", "Algeria", "Anguilla", "Antigua and Barbuda", "Argentina", "Aruba", "Bahamas", "Bahrain", "Barbados", "Belize", "Bolivia", "Bosnia and Herzegovina", "Botswana", "Brazil", "British Virgin Islands", "Brunei Darussalam", "Bulgaria", "Cameroon", "Cayman Islands", "Chile", "Colombia", "Cook Islands", "Costa Rica", "Cote d'Ivoire", "Croatia", "Cuba"," Czechoslovakia (Former)", "Korea (North)", "Dominica", "Dominican Republic", "Ecuador", "Egypt", "El Salvador", "Fiji", "French Polynesia", "Gabon", "Ghana", "Grenada", "Guatemala", "Haiti", "Honduras", "Indonesia", "Iran", "Iraq", "Jamaica", "Jordan", "Kenya", "Kuwait", "Lebanon", "Libyan Arab Jamahiriya", "Malaysia", Marshall Islands, Mauritius, Mexico, Micronesia, Mongolia, Montserrat , Morocco, Namibia, Nauru, Netherlands Antilles, New Caledonia, Nicaragua, Nigeria, Occupied Palestine, Oman, Pakistan, Palau, Panama, Papua New Guinea, Paraguay, Peru, Philippines, Puerto Rico, Qatar, Romania, Saint Kitts-Nevis, Saint Lucia, Saint Vincent and the Grenadines, Saudi Arabia, Serbia and Montenegro, Seychelles, Somalia, South Africa, Sri Lanka, Sudan, Suriname, Swaziland, Syria, Macedonia, Thailand, Tonga, Trinidad and Tobago, Tunisia, Turkey, Turks and Caicos Islands, United Arab Emirates, Uruguay, Venezuela, Vietnam, Zanzibar, Zimbabwe
#
# D3:	Afghanistan, Angola, Bangladesh, Benin, Bhutan, Burkina Faso, Burundi, Cambodia, Cape Verde, Central African Republic, Chad, Comoros, Congo (Brazzaville), Congo (Kinshasa), Djibouti, Equatorial Guinea, Eritrea, Ethiopia, Gambia, Guinea, Guinea-Bissau, Guyana, Kiribati, Laos, Lesotho, Liberia, Madagascar, Malawi, Maldives, Mali, Mauritania, Mozambique, Myanmar, Nepal, Niger, Rwanda, Samoa, Sao Tome and Principe, Senegal, Sierra Leone, Solomon Islands, Timor-Leste, Togo, Tuvalu, Uganda, Tanzania, Vanuatu, Yemen, Zambia
#
# EU:	Austria, Belgium, Cyprus, Czech Republic, Denmark, Finland, France, Germany, Greece, Hungary, Ireland, Italy, Luxembourg, Malta, Netherlands, Poland, Portugal, Slovakia, Slovenia, Spain, Sweden, United Kingdom
#
# FSU:	Armenia, Azerbaijan, Belarus, Estonia, Georgia, Kazakhstan, Kyrgyzstan, Latvia, Lithuania, Moldova (Republic of), Russian Federation, Tajikistan, Turkmenistan, Ukraine, USSR (Former), Uzbekistan
#
## summarize population growth by decade
d50<-which(cities$Period %in% c("1950-1955", "1955-1960"))
d60<-which(cities$Period %in% c("1960-1965", "1965-1970"))
d70<-which(cities$Period %in% c("1970-1975", "1975-1980"))
d80<-which(cities$Period %in% c("1980-1985", "1985-1990"))
d90<-which(cities$Period %in% c("1990-1995", "1995-2000"))
d00<-which(cities$Period %in% c("2000-2005", "2005-2010"))
d10<-which(cities$Period %in% c("2010-2015", "2015-2020"))
d20<-which(cities$Period %in% c("2020-2025"))
cities$decade<-NA
cities$decade[d50]<-"Fifties"
cities$decade[d60]<-"Sixties"
cities$decade[d70]<-"Seventies"
cities$decade[d80]<-"Eighties"
cities$decade[d90]<-"Nineties"
cities$decade[d00]<-"Oughts"
cities$decade[d10]<-"Twenty-Teens"
cities$decade[d20]<-"Twenty-Twenties"
# summarize population growth by epoch
e1<-which(cities$Period %in% c("1950-1955", "1955-1960", "1960-1965", "1965-1970", "1970-1975"))
e2<-which(cities$Period %in% c("1975-1980", "1980-1985", "1985-1990", "1990-1995", "1995-2000"))
e3<-which(cities$Period %in% c("2000-2005", "2005-2010", "2010-2015", "2015-2020", "2020-2025"))
cities$epoch<-NA
cities$epoch[e1]<-"1950-1975"
cities$epoch[e2]<-"1975-2000"
cities$epoch[e3]<-"2000-2025"
# save final data.frame
save(cities, file="cities.rsav")
epochal<-ddply(cities, .(Country.Code, Country, City.Code, Urban.Agglomeration, Latitude, Longitude, epoch), summarize, End.Pop.=Pop.[5], Annual.Growth=(Pop.[5]-Pop.[1])/Pop.[1]*100/25, Period.Growth= (Pop.[5]-Pop.[1])/Pop.[1]*100)
check(epochal) # check for NAs and complete cases
epochal<-na.omit(epochal)
epochal$epoch<-as.factor(epochal$epoch)
epochal$Period.Growth.Bin<-cut(epochal$Period.Growth, breaks=quantile(epochal$Period.Growth), include.lowest=TRUE)
epochal$Period.Growth.Quartile<-factor(epochal$Period.Growth.Bin, labels=c("1st quartile","2nd quartile","3rd quartile","4th quartile"))
check(epochal) # check for NAs and complete cases
save(epochal, file="epochal.rsav")
str(cities)
str(epochal)
filepath<-"~/github/Rcommands/"
## read-in csv files from NRLDC html data scapring (Chris Tan and Myf March 2014)
options(stringsAsFactors=FALSE)
## Load libraries
library(knitr)    # create RMD documents
library(plyr)     # ddply...
library(reshape2) # melt...
library(ggplot2)  # plots
library(scales)   # used in ggplot()
library(xlsx)     # read excel files
library(sm)       # density plots
load("growth.rsav")         # 5-yr average population growth in cities w. pop > 750k
load("growth.melt.rsav")    # ""
load("pop.rsav")            # 5-yr average population in cities w. pop > 750k
load("pop.melt.rsav")       # ""
load("decadal.growth.rsav") # computed decadal population growth ('50-60, ..., '10-20)
load("decadal.growth2.rsav")# computed decadal population growth ('55-65, ..., '15-25)
load("cities") # synthesized population and growth rate data for global cities with pop > 750k
load("epochal") # "cities" summarized by 25-yr epoch
filepath<-"~/github/Rcommands/"
## read-in csv files from NRLDC html data scapring (Chris Tan and Myf March 2014)
options(stringsAsFactors=FALSE)
## Load libraries
library(knitr)    # create RMD documents
library(plyr)     # ddply...
library(reshape2) # melt...
library(ggplot2)  # plots
library(scales)   # used in ggplot()
library(xlsx)     # read excel files
library(sm)       # density plots
load("growth.rsav")         # 5-yr average population growth in cities w. pop > 750k
load("growth.melt.rsav")    # ""
load("pop.rsav")            # 5-yr average population in cities w. pop > 750k
load("pop.melt.rsav")       # ""
# load("decadal.growth.rsav") # computed decadal population growth ('50-60, ..., '10-20)
# load("decadal.growth2.rsav")# computed decadal population growth ('55-65, ..., '15-25)
load("cities.rsav") # synthesized population and growth rate data for global cities with pop > 750k
load("epochal.rsav") # "cities" summarized by 25-yr epoch
filepath<-"~/github/Rcommands/"
## read-in csv files from NRLDC html data scapring (Chris Tan and Myf March 2014)
options(stringsAsFactors=FALSE)
## Load libraries
library(knitr)    # create RMD documents
library(plyr)     # ddply...
library(reshape2) # melt...
library(ggplot2)  # plots
library(scales)   # used in ggplot()
library(xlsx)     # read excel files
library(sm)       # density plots
load("growth.rsav")         # 5-yr average population growth in cities w. pop > 750k
load("growth.melt.rsav")    # ""
load("pop.rsav")            # 5-yr average population in cities w. pop > 750k
load("pop.melt.rsav")       # ""
# load("decadal.growth.rsav") # computed decadal population growth ('50-60, ..., '10-20)
# load("decadal.growth2.rsav")# computed decadal population growth ('55-65, ..., '15-25)
load("cities.rsav") # synthesized population and growth rate data for global cities with pop > 750k
load("epochal.rsav") # "cities" summarized by 25-yr epoch
str(cities)
cities$Period
str(pop)
str(growth)
str(growth.melt)
str(pop.melt)
world <- map_data("world")
worldmap <- ggplot(world, aes(x=long, y=lat, group=group)) +
geom_path()
# CURRENT Population and Urbanization Rates
ggplot() +
geom_path(data=world, aes(x=long, y=lat, group=group)) +
#   geom_ribbon(data=world, x=world$long, ymin=-23.45, ymax= 23.45, alpha=0.3, fill="green") +
#   geom_ribbon(data=world, x=world$long, ymin=-38, ymax=-23.45, alpha=0.3, fill="blue") +
#   geom_ribbon(data=world, x=world$long, ymin= 23.45, ymax= 38, alpha=0.3, fill="blue") +
geom_hline(y=-23.45, linetype=2) +
geom_hline(y= 23.45, linetype=2) +
geom_hline(y=-38, linetype=3) +
geom_hline(y=38, linetype=3) +
geom_point(data=subset(cities, Period=="2010-2015"), aes(x=Longitude, y=Latitude, colour=Growth.Quartile, size=Pop./10^3)) +
#coord_equal() +
scale_y_continuous(breaks=(-2:2) * 30) +
scale_x_continuous(breaks=(-4:4) * 45) +
labs(colour = 'Urbanization Rate', size="Population (Millions)", title="Rapid Urbanization Throughout the Tropics and Sub-Tropics") +
theme_bw() +
scale_color_brewer(palette="Reds") +
scale_size(range = c(2, 10))
test<-subset(cities, Period=="2010-2015")
test<-test[order(-test$Pop.), ]
test$Current.Pop.<-test$Pop./10^3
# give shorter names for print layout
usa<-which(test$Country=="United States of America")
test$Country[usa]<-"U.S.A"
uae<-which(test$Country=="United Arab Emirates")
test$Country[uae]<-"U.A.E"
DRC<-which(test$Country=="Democratic Republic of the Congo")
test$Country[DRC]<-"D.R.C"
megacities<-subset(test, Current.Pop.>=10, select=c("Continent","Country","Urban.Agglomeration","Current.Pop."))
rownames(megacities)<-NULL
colnames(megacities)[4]<-"Population [MM]"
print("World's Largest Cities in 2015 (Population > 10 million)")
print(megacities, digits=3)
fastcities<-test[order(-test$Growth), ]
fastcities<-subset(fastcities, select=c("Continent","Country","Urban.Agglomeration","Growth"))
rownames(fastcities)<-NULL
colnames(fastcities)[4]<-"Growth.Rate [%]"
print("World's Fastest Growing Cities (2010-2015) with a Population > 750,000")
print(fastcities[1:20,], digits=3)
getwd()
c<-"THE EFFECT OF CLIMATE AND SUPPLY-CHAIN CONSTRAINTS ON GRID-SCALE ELECTRICITY SUPPLY RELIABILITY"
tolower(c)
