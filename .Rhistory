d=dim(Sch.drl)[1]/length(levels(Sch.drl$Seb_Name))
seq<-seq(0,(d*24*60*60)-(15*60),15*60)
time<-as.POSIXct(seq,origin="2012-03-26", tz='IST')
#Grab Delhi data
Sch.drl.Delhi=subset(Sch.drl, Seb_Name=="DELHI")
#grab the values of Sch.drl.Delhi (in units of MU)
b<-Sch.drl.Delhi[,3:98]
b<-as.data.frame(t(b))
#stack days into one long vector
b<-stack(b)
b$dayIND<-dayIND
b$POSIXlt<-time
b$var<-c(rep("Schedule", length(b)))
resid=b$values-a$values # Schedule - Actual = UI
UI<-as.data.frame(x=cbind(resid,a$ind,dayIND), colClasses=c("numeric","numeric","Factor"))
colnames(UI)<-c("values","ind","dayIND")
UI$POSIXlt<-time
UI$var<-rep("UI",length(resid))
## Now show as a time series
c<-as.data.frame(rbind(a,b,UI))
c$values<-as.numeric(c$values/10) #original data in LU, convert to MU
c$dayIND<-as.factor(dayIND)
c$var<-as.factor(c$var)
c$Date<-as.Date(c$POSIXlt)
c$time<-as.factor(strftime(c$POSIXlt, format="%H:%M:%S", tz="IST"))
# Seperate Date into yr-month-day
ymd<-strsplit(as.character(c$Date),"-")
c$year<-laply(ymd, '[[', 1) #assign the list of years to an array called c$year
c$month<-laply(ymd, '[[', 2)
c$day<-laply(ymd, '[[', 3)
c$year<-as.factor(c$year)
c$month<-as.factor(c$month)
c$day<-as.factor(c$day)
# p<-ggplot(c,aes(x=POSIXlt,y=values, colour=var)) + geom_line()
# p + scale_y_continuous(name='Delhi Actual Drawal (MU)') + scale_x_datetime(breaks=date_breaks("2 months"))
## figure too busy... try aggregating data first...
# Daily drawal from grid to Delhi
daily<-ddply(c,.(Date,var),summarize,daily=sum(values))
dailyp<-ggplot(daily,aes(x=Date,y=daily, colour=var)) + geom_line()
dailyp + scale_y_continuous(name='Energy (MU)') + scale_x_date(breaks=date_breaks("2 months"), labels=date_format("%b-%Y")) + labs(title="Daily Drawal from Grid to Delhi")
# Now show daily actual energy drawal from grid side-by-side with daily mean temperature during the same period
Act<-subset(daily,var=="Actual")
p1<-ggplot(Act, aes(x=Date,y=daily)) + geom_line(colour="blue") + scale_y_continuous(name='Energy (MU)', limits=c(0,round(1.1*max(Act$daily),digits=-1)), expand=c(0,0)) + scale_x_date(breaks=date_breaks("2 months"), labels=date_format("%b-%Y")) + labs(title="Daily Actual Drawal from Grid to Delhi")
p1ALT<-ggplot(Act, aes(x=Date,y=daily)) + geom_line(colour="blue") + scale_y_continuous(name='Energy (MU)') + scale_x_date(breaks=date_breaks("1 months"), labels=date_format("%b-%Y")) + labs(title="Daily Actual Drawal from Grid to Delhi")
# Daily Mean Temperature for Delhi, India 1995-2013.
data<-read.table(file="/Users/elliotcohen/Dropbox/Data/Climate/Daily_Temperature_1995-2013_Delhi.txt", header=FALSE, colClasses=c("factor", "factor","factor","numeric"))
names(data)<-c("Month","Day","Year","Temp")
# Create Date attribute (column)
data$Date<-as.Date(as.character(paste(data$Year, data$Month, data$Day,sep="-")), "%Y-%m-%d")
# grab data for period 2012-04-01 to 2013-03-31
yr<- subset(data, Date > as.Date("2012-03-31"))
yr<-subset(yr,Date<as.Date("2013-04-01"))
head(yr)
p2<-ggplot(yr,aes(x=Date, y=Temp)) + geom_line(colour="red") + scale_y_continuous(name='Temperature (deg.F)', limits=c(round(32,digits=-1),round(1.1*max(yr$Temp),digits=-1)), expand=c(0,0)) + scale_x_date(breaks=date_breaks("2 months"), labels=date_format("%b-%Y")) + labs(title="Daily Mean Temperature of Delhi")
p2ALT<-ggplot(yr,aes(x=Date, y=Temp)) + geom_line(colour="red") + scale_y_continuous(name='Temperature (deg.F)') + scale_x_date(breaks=date_breaks("1 months"), labels=date_format("%b-%Y")) + labs(title="Daily Mean Temperature of Delhi")
# add temperature plot side-by-side
multiplot(p1,p2,cols=1)
multiplot(p1ALT,p2ALT,cols=1)
## Now let's look at monthly-average 24-hour demand profile of net drawal from grid.
test<-ddply(c,.(var,month,time),summarize,MonMean=mean(values))
testp<-ggplot(test,aes(x=time,y=MonMean,colour=var))
testp + geom_point() + facet_wrap(~month)
## We can also look at all the observations (days) at a given timeslice, faceted by month
test2<-ggplot(c,aes(x=time,y=values,colour=var))
test2 + geom_point() + facet_wrap(~month)
# # seperate out the data
# sch<-subset(c,c$var=="Schedule")
# act<-subset(c,c$var=="Actual")
# diff<-subset(c,c$var=="UI")
#
# # number of weeks of data
# n<-dim(c)[1]/(96*7*length(levels(act$var)))
# ts<-96*7 # timeslices per week
#
# # assign an index for the week
# index<-rep(0,dim(act)[1])
#   for (q in 1:length(levels(act$var))){
#     for(i in 1:n){
#       j<-(i-1)*ts+1
#       k<-i*ts
#       index[j:k]<-c(rep(i,ts))
#     }
#   }
#
# act$wkIND<-as.factor(index)
# sch$wkIND<-as.factor(index)
# diff$wkIND<-as.factor(index)
#
# # put the data back together
# c<-rbind(act,sch,diff)
# look at monthly-average weeklong-pattern..
# Too slow... does not finish...
# # index weekday vs weekend
# c$dayIND<-as.numeric(c$dayIND)
# n=dim(c)[1]
# for (i in 1:n){
#   if(c$dayIND[i]==1) {c$wkdayIND[i]<-"Workday"} else
#     if(c$dayIND[i]==2) {c$wkdayIND[i]<-"Workday"} else
#       if(c$dayIND[i]==3) {c$wkdayIND[i]<-"Workday"} else
#         if(c$dayIND[i]==4) {c$wkdayIND[i]<-"Workday"} else
#           if(c$dayIND[i]==5) {c$wkdayIND[i]<-"Workday"} else
#           {c$wkdayIND[i]<-"Weekend"} }
# index monsoon vs. non-monsoon
# c$monsoon<-0
# for (i in 1:n){
#   if(c$month[i]==7) {c$Monsoon[i]<-"Monsoon"} else
#     if(c$month[i]==8) {c$Monsoon[i]<-"Monsoon"} else
#       if(c$month[i]==9) {c$Monsoon[i]<-"Monsoon"} else
#       {c$Monsoon[i]<-"Dry"} }
######## CHECK THIS CHUNK BELOW... SOMETHING NOT RIGHT.... ###
# analyze the data by week
# take the monthly mean of each time slice in a given month
# c$month<-as.factor(c$month)
# data<-subset(c,select=c(var,year,month,day,time,values))
#
# test<-ddply(data,.(var,year,month,time),summarize,MonMean=mean(values))
#
# testp<-ggplot(test,aes(x=time,y=MonMean,colour=var))
# testp + geom_line() + facet_wrap(~month)
#
# testp
#
# for(i in 1:12){
#   data<-subset(c,c$month==i)
#   assign(paste(month.abb[i],"plot",sep="_"),data)
#   droplevels(month.abb[i]$wkIND)
# }
#
# p<-ggplot(c, aes(x=POSIXlt, y=values, colour=var))
#
# p + geom_line() + facet_wrap(~wkIND, scale="free")
# # p<-ggplot(test2,aes(x=Date,y=values, colour=var,linetype=var))
# # p + geom_line() + facet_wrap(~wkIND, scale="free")
########## CHECK CHUNK ABOVE  #####################
# compute monthly sums
MonSum<-ddply(c,.(year,month,var),summarize,MonSum=sum(values))
MonSum$yrmon<-paste(MonSum$year,MonSum$month, sep="-")
MonSum
# Monthly drawal from grid to Delhi (Apr 2012-Mar 2013)
MonSump<-ggplot(MonSum,aes(x=yrmon,y=MonSum, group=var,colour=var)) + geom_line()
MonSump + scale_y_continuous(name='Energy (MU)') + labs(title="Monthly Drawal from Grid to Delhi") +scale_x_discrete(name="time (year-month)")
## Summary statistics. Recall Schedule-Drawal data is the net drawal from ISGS grid to Delhi.
summary<-ddply(c,.(var),summarize,annual=sum(values))
summary$avgMonthly<-summary$annual/12
summary$avgWeekly<-summary$annual/52
summary$avgDaily<-summary$annual/365
summary$avgHourly<-summary$annual/(365*24)
summary
########### Timeslice aggregation ##############
# Daily and Monthly timeseries plots ABOVE. Weekly and Extras BELOW...
#create a time series starting 2011-04-01
#15-min intervals from start of year to April 1
drop.days=31+28+31 #days in Jan, Feb, March
ints=drop.days*96
keep.days<-length(tsa)/96
# create time series and convert energy units from LU to MU
tsa<-ts(data=a[577:nrow(a),1]/10, start=c(2012,ints), deltat=1/(keep.days*96))
tsb<-ts(data=b[577:nrow(b),1]/10, start=c(2012,ints), deltat=1/(keep.days*96))
tsUI<-ts(data=UI[577:nrow(UI),1]/10, start=c(2012,ints), deltat=1/(keep.days*96))
#Daily schedule, actual and UI
plot.ts(aggregate(tsa,nfrequency=keep.days*1, FUN=sum),ylim=c(0,90),xaxt="s",main="Energy Drawal from Grid to Delhi, April 2012 - March 2013", ylab="MU (GWh)") #daily actual
lines(aggregate(tsb,nfrequency=keep.days*1, FUN=sum), col="blue") #daily schedule
lines(aggregate(tsUI,nfrequency=keep.days*1, FUN=sum), col="red") #daily UI
legend("topright", legend=c("Daily Actual", "Daily Schedule", "Daily UI"), col=c(rep(c("black","blue","red"),1)),lty=c(1,1,1),lwd=c(1,1,1), cex=1)
# Weekly schedule, actual and UI
plot.ts(aggregate(tsa,nfrequency=keep.days/7, FUN=sum),ylim=c(0,max(tsa)*(96*7)), main="Energy Drawal from Grid to Delhi, April 2012 - March 2013", ylab="MU (GWh)")
lines(aggregate(tsa,nfrequency=keep.days/7, FUN=sum),lty=2, lwd=2) #weekly
lines(aggregate(tsb,nfrequency=keep.days/7, FUN=sum), col="blue", lty=2, lwd=2) #weekly
lines(aggregate(tsUI,nfrequency=keep.days/7, FUN=sum), col="red",lty=2, lwd=2) #weekly
legend("topright", legend=c("Weekly Actual","Weekly Schedule", "Weekly UI"), col=c(rep(c("black","blue","red"),1)),lty=c(2,2,2),lwd=c(2,2,2), cex=1)
# ## EXTRAS....
# # daily-average 15min energy and weekly avg 15-min energy drawal.  (GOOD BUT NOT NECESSARY)
# plot.ts(aggregate(tsa,nfrequency=keep.days*1, FUN=mean),ylim=c(0,max(tsa)), main="Energy Drawal from Grid to Delhi, April 2012 - March 2013", ylab="MU (GWh)") #daily average actual drawal
# lines(aggregate(tsb,nfrequency=keep.days*1, FUN=mean), col="blue") #daily average scheduled drawal
# lines(aggregate(tsUI,nfrequency=keep.days*1, FUN=mean), col="red") #daily average UI
#
# lines(aggregate(tsa,nfrequency=keep.days/7, FUN=mean),lty=2, lwd=2) #weekly
# lines(aggregate(tsb,nfrequency=keep.days/7, FUN=mean), col="blue", lty=2, lwd=2) #weekly
# lines(aggregate(tsUI,nfrequency=keep.days/7, FUN=mean), col="red",lty=2, lwd=2) #weekly
#
# legend("topright", legend=c("Daily-avg 15min Actual", "Daily-avg 15min Schedule", "Daily-avg 15min UI", "Weekly-avg 15min Actual","Weekly-avg 15min Schedule", "Weekly-avg 15min UI"), col=c(rep(c("black","blue","red"),2)),lty=c(1,1,1,2,2,2),lwd=c(1,1,1,2,2,2), cex=0.9)
###############
##############
############## Repeat for All NR States
############### SCHEDULED Drawal (15-min) ###################
# Import Northern Region Schedule-Drawal-UI data...
Sch.drl<-read.table(file="/Users/elliotcohen/Dropbox/Data/Electricity/CEA/Data/UI/Drl_Sch_NR_2012-13.csv",sep=",",header=TRUE, colClasses=c("factor","character",rep("numeric",96)),blank.lines.skip=TRUE)
Sch.drl<-melt(Sch.drl,id.vars=c("State","Date"))
Sch.drl$variable<-as.numeric(Sch.drl$variable)
# add Date
my <- strsplit(Sch.drl$Date,'/')
#split the date string into year, month, day
Sch.drl$year<-laply(my, '[[', 3) #assign the list of years to an array called Sch.drl$year
Sch.drl$year<-paste("20",Sch.drl$year, sep="")
Sch.drl$month<-laply(my, '[[', 1)
Sch.drl$day<-laply(my, '[[', 2)
#number of days in the time series
d=dim(Sch.drl)[1]/length(levels(Sch.drl$State))
seq<-seq(0,(d*24*60*60)-(15*60),15*60)
time<-as.POSIXct(seq,origin="2012-03-26 00:00:00", tz='IST')
# Sch.drl$hr<-Sch.drl$variable*15/60
# hr<-Sch.drl$variable*15/60
# hr<-strftime(hr,format="%H", origin="2012-03-26 00:00:00", tz="IST")
dt<-paste(Sch.drl$year,Sch.drl$month,Sch.drl$day,Sch.drl$hr, sep="-")
# create POSIXct time series
Sch.drl$POSIXct<-strftime(dt,format="%Y-%b-%d %H",tz='IST') #Enlgish month name
#or numeric month
#Sch.drl$POSIXct<-strftime(paste(Sch.drl$year,Sch.drl$month,Sch.drl$day,sep='-'),format='%Y-%m-%d',tz='IST')
Sch.drl$POSIXct<-as.POSIXct(Sch.drl$POSIXct,format='%Y-%b-%d %H',tz='IST')
# create Date attribute
Sch.drl$Date<-as.Date(Sch.drl$POSIXct,"%Y-%m-%d")
# Re-arrange data.frame
Sch.drl<-subset(Sch.drl,select=c("State","Date","POSIXct","month","variable","value"))
Sch.drl$month<-as.factor(Sch.drl$month)
############# SCHEDULED DRAWAL (15min) ################
#Import Northern Region Schedule-Drawal-UI data...
Sch.drl=read.xlsx2(file="/Users/elliotcohen/Dropbox/Data/Electricity/CEA/Data/UI data/Chandigarh.xlsx",sheetIndex=1,colIndex=c(1:98),as.data.frame=TRUE,header=FALSE,StartRow=7)
#Sch.drl=Sch.drl[7:371,] # Take one full year's data
#number of days in the time series
d=dim(Sch.drl)[1]/length(levels(Sch.drl$Seb_Name))
seq<-seq(0,(d*24*60*60)-(15*60),15*60)
time<-as.POSIXct(seq,origin="2012-03-26", tz='IST')
#Grab Chandigarh data
Sch.drl.Chandigarh=subset(Sch.drl, Seb_Name=="Chandigarh")
#grab the values of Sch.drl.Chandigarh (in units of MU)
b<-Sch.drl.Chandigarh[,3:98]
b<-as.data.frame(t(b))
#stack days into one long vector
b<-stack(b)
b$dayIND<-dayIND
b$POSIXlt<-time
b$var<-c(rep("Schedule", length(b)))
resid=b$values-a$values # Schedule - Actual = UI
UI<-as.data.frame(x=cbind(resid,a$ind,dayIND), colClasses=c("numeric","numeric","Factor"))
colnames(UI)<-c("values","ind","dayIND")
UI$POSIXlt<-time
UI$var<-rep("UI",length(resid))
## Now show as a time series
c<-as.data.frame(rbind(a,b,UI))
c$values<-as.numeric(c$values/10) #original data in LU, convert to MU
c$dayIND<-as.factor(dayIND)
c$var<-as.factor(c$var)
c$Date<-as.Date(c$POSIXlt)
c$time<-as.factor(strftime(c$POSIXlt, format="%H:%M:%S", tz="IST"))
# Seperate Date into yr-month-day
ymd<-strsplit(as.character(c$Date),"-")
c$year<-laply(ymd, '[[', 1) #assign the list of years to an array called c$year
c$month<-laply(ymd, '[[', 2)
c$day<-laply(ymd, '[[', 3)
c$year<-as.factor(c$year)
c$month<-as.factor(c$month)
c$day<-as.factor(c$day)
# p<-ggplot(c,aes(x=POSIXlt,y=values, colour=var)) + geom_line()
# p + scale_y_continuous(name='Chandigarh Actual Drawal (MU)') + scale_x_datetime(breaks=date_breaks("2 months"))
## figure too busy... try aggregating data first...
# Daily drawal from grid to Chandigarh
daily<-ddply(c,.(Date,var),summarize,daily=sum(values))
dailyp<-ggplot(daily,aes(x=Date,y=daily, colour=var)) + geom_line()
dailyp + scale_y_continuous(name='Energy (MU)') + scale_x_date(breaks=date_breaks("2 months"), labels=date_format("%b-%Y")) + labs(title="Daily Drawal from Grid to Chandigarh")
# Now show daily actual energy drawal from grid side-by-side with daily mean temperature during the same period
Act<-subset(daily,var=="Actual")
p1<-ggplot(Act, aes(x=Date,y=daily)) + geom_line(colour="blue") + scale_y_continuous(name='Energy (MU)', limits=c(0,round(1.1*max(Act$daily),digits=-1)), expand=c(0,0)) + scale_x_date(breaks=date_breaks("2 months"), labels=date_format("%b-%Y")) + labs(title="Daily Actual Drawal from Grid to Chandigarh")
p1ALT<-ggplot(Act, aes(x=Date,y=daily)) + geom_line(colour="blue") + scale_y_continuous(name='Energy (MU)') + scale_x_date(breaks=date_breaks("1 months"), labels=date_format("%b-%Y")) + labs(title="Daily Actual Drawal from Grid to Chandigarh")
?write
?write.csv
setwd("/Users/elliotcohen/Dropbox/data/Electricity/CEA/Rcommands")
library(xlsx)
library(plyr)
library(ggplot2)
library(scales)
library(gdata)
library(chron)
library(reshape2)
setwd("~/Dropbox/data/Electricity/CEA/Rcommands")
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
SLDC=read.xlsx(file="/Users/elliotcohen/Documents/SLDC big data/DTL-PS-2012-13.xls",sheetIndex=1,as.data.frame=TRUE,header=TRUE)
str(SLDC)
SLDC$Date.Time<-as.POSIXlt(SLDC$Time, tz="IST")
SLDC$Date<-as.Date(SLDC$Date.Time)
# Seperate Date into yr-month-day
ymd<-strsplit(as.character(SLDC$Date),"-")
SLDC$year<-laply(ymd, '[[', 1) #assign the list of years to an array called SLDC$year
SLDC$month<-laply(ymd, '[[', 2)
SLDC$day<-laply(ymd, '[[', 3)
SLDC$year<-as.factor(SLDC$year)
SLDC$month<-as.factor(SLDC$month)
SLDC$day<-as.factor(SLDC$day)
clean.time<-round(SLDC$Date.Time,units="mins")
SLDC$time<-times(format(clean.time, "%H:%M:%S"))
save(SLDC, file="SLDC.rData")
SLDCv2<-subset(SLDC, select = c(Date,year,month,day,time,Delhi.Generation,Schedule.from.Grid,Drawl.from.Grid,Demand.met,OD.UD,Frequency))
str(SLDCv2)
sum(is.na(SLDCv2))
save(SLDCv2, file="SLDCv2.rData")
write.csv(SLDC, file="Delhi_30min_load.csv")
head(SLDC)
getwd()
range(SLDC$Date)
write.csv(SLDC, file="Delhi_30min_load_2012-2013.csv")
load("SLDCv2.rData")
str(SLDC)
load("SLDCv2.rData")
d.sum<-ddply(SLDCv2, .(Date), summarise, Delhi.Gen=sum(Delhi.Generation), Schedule.from.Grid=sum(Schedule.from.Grid), Drawl.from.Grid=sum(Drawl.from.Grid), Demand.met=sum(Demand.met), OD.UD=sum(OD.UD), Freq=mean(Frequency), UIrate=mean(UIrate), UIprice=sum(UIprice))
m.sum<-ddply(SLDCv2, .(year, month), summarise, Delhi.Gen=sum(Delhi.Generation), Schedule.from.Grid=sum(Schedule.from.Grid), Drawl.from.Grid=sum(Drawl.from.Grid), Demand.met=sum(Demand.met), OD.UD=sum(OD.UD), Freq=mean(Frequency), UIrate=mean(UIrate), UIprice=sum(UIprice))
m.sum$Date<-as.Date(paste(m.sum$year, m.sum$month, 15, sep="-"), format="%Y-%m-%d")
d.PSP<-subset(d.sum, select=1:6)
d.PSP.melt<-melt(d.PSP, id.vars=1)
m.PSP<-subset(m.sum, select=c(Date, 3:7))
# # Create date attribute (day is arbitrary)
# Date<-as.Date(paste(m.PSP$year, m.PSP$month, 15, sep="-"), format="%Y-%m-%d")
m.PSP.melt<-melt(m.PSP, id.vars=1)
UIrate<-read.csv(file="/Users/elliotcohen/Dropbox/Data/Electricity/CEA/Data/UI/UI_rate.csv", header=TRUE, )
UL1<-50.20
LL1<-50.00
UL2<-50.0
LL2<-49.8
UL3<-49.8
LL3<-49.5
SLDCv2$UIrate<-0
n<-dim(SLDCv2)[1]
######## UIrate ~ fn(Freq)
for(i in 1:n){
if(SLDCv2$Frequency[i]<=50.2 & SLDCv2$Frequency[i]>50.0) {SLDCv2$UIrate[i]<-(((UL1-SLDCv2$Frequency[i])/0.02)*16.5)}
if(SLDCv2$Frequency[i]<=50.00 & SLDCv2$Frequency[i]>49.8) {SLDCv2$UIrate[i]<-(((UL2-SLDCv2$Frequency[i])/0.02)*28.5) + (((UL1-LL1)/0.02)*16.5) }
if(SLDCv2$Frequency[i]<=49.8 & SLDCv2$Frequency[i]>49.5) {SLDCv2$UIrate[i]<-(((UL3-SLDCv2$Frequency[i])/0.02)*28.12) + (((UL1-LL1)/0.02)*16.5) + (((UL2-LL2)/0.02)*28.5)}
if(SLDCv2$Frequency[i]<49.5) {SLDCv2$UIrate[i]<-900}
}
## Now compute cost of UI: OD/UD x UIrate = UIprice
SLDCv2$UIprice<-SLDCv2$OD.UD * SLDCv2$UIrate * 1000/100 * (1/10^5) #MWh (?) x paise/KWh x 1000 KWh/1MWh x 1 rupee/100 paise x 1 Lahk Rupee /100,000 rupee = Lahk Rupee
## check for NAs
which(is.na(SLDCv2), arr.ind=TRUE)  #position of NA's (in any) --> None.
look<-which(is.na(SLDCv2), arr.ind=TRUE)
SLDCv2[look[,1],]
## check for complete.cases
test<-complete.cases(SLDCv2)
sum(!test) #how many are not complete.cases? --> 0
sum(test)  #how many are complete.cases--> 20193 (all)
??cut
bike<-read.csv(file="/Users/elliotcohen/Downloads/data.csv")
dim(bike)
head(bike)
bike$duration<-bike$stoptime-bike$starttime
str(bike)
options(stringsAsFactors=FALSE)
starttime<-as.POSIXct(bike$starttime)
str(bike)
bike<-bike[,-6]
str(bike)
head(starttime)
class(starttime)
endtime<-as.POSIXct(bike$stoptime)
bike$duration<-endtime-starttime
str(bike)
head(bike)
avgTrip<-mean(bike$duration)
avgTrip
class(avgTrip)
?difftime
avgTripSeconds<-as.difftime(avgTrip, units="secs")
avgTripSeconds
format(avgTrip, units="secs")
as.numeric(avgTrip, units = "secs")
avgTrip
avgTrip*60
str(bike)
head(bike)
?order
bike2<-bike[ order(bike$bikeid), ]
str(bike2)
head(bike2)
bike3<-bike[ order(bike$bikeid, bikestarttime, stoptime), ]
bike3<-bike[ order(bike$bikeid, bike$starttime, bike$stoptime), ]
head(bike3)
which(bike3$start.station.id != bike3$end.station.id-1)
bike3$expected.start.station.id<-c(NA, bike3$end.station.id)
bike3$expected.start.station.id<-c(NA, bike3$end.station.id[-1]
)
str(bike3)
head(bike)
head(bike3)
bike$end.station.id[1]
bike$end.station.id[2]
bike<-bike[ order(bike$bikeid, bike$starttime, bike$stoptime), ]
str(bike)
head(bike)
start<-bike$start.station.id
end<-bike$end.station.id
n<-nrow(bike)
n
start<-bike$start.station.id[2:n]
head(start)
end<-bike$end.station.id[1:(n-1)]
head(end)
sum(start =! end)
str(start)
start[1]==end[1]
start<-as.character(start)
end<-as.character(end)
start[1]==end[1]
sum(start =! end))
sum(start =! end)
sum(start != end)
sum(start != end)/n
str(bike)
head(bike)
arrive.station<-bike$stoptime[1:n-1]
leave.station<-bike$starttime[2:n]
head(arrive.statin)
head(arrive.station)
str(arrive.station)
arrive.station<-as.POSIXct(bike$stoptime[1:n-1])
leave.station<-as.POSIXct(bike$starttime[2:n])
station.duration<-leave.station-arrive.station
avg.station.duration<-mean(station.duration)
avg.station.duration
head(cbind(arriv.station, leave.station))
head(cbind(arrive.station, leave.station))
bike<-read.csv(file="/Users/elliotcohen/Downloads/data.csv")
save(bike, file="bike.rData")
str(bike)
bike$starttime<-as.POSIXct(bike$starttime)
bike$stoptime<-as.POSIXct(bike$stoptime)
str(bike)
bike$trip.duration<-bike$stoptime-bike$starttime
avgTrip<-mean(bike$trip.duration) # minutes
as.numeric(avgTrip, units = "secs") # seconds
bike<-bike[ order(bike$bikeid, bike$starttime, bike$stoptime), ]
str(bike)
head(bike)
n<-nrow(bike)
start<-bike$start.station.id[2:n]
end<-bike$end.station.id[1:(n-1)]
start<-as.character(start)
end<-as.character(end)
# count how many times a bike trip did not originate from the same station where the bike was last seen.
sum(start != end)
sum(start != end)/n
arrive.station<-as.POSIXct(bike$stoptime[1:n-1])
leave.station<-as.POSIXct(bike$starttime[2:n])
station.duration<-leave.station-arrive.station
avg.station.duration<-mean(station.duration)
mean(station.duration)
head(cbind(arrive.station, leave.station))
head(bike)
t<-2:n  # start at the second timestamp
length(t)
head(t)
arrive.station<-bike$stoptime[t-1]
leave.station<-bike$starttime[t]
head(cbind(arrive.station, leave.station))
class(arrive.station)
class(leave.station)
?difftime
difftime(leave.station, arrive.station, units="mins")
station.duration<-difftime(leave.station, arrive.station, units="mins")
head(station.duration)
mean(station.duration)
sum(is.na(station.duration))
hist(station.duration)
class(station.duration)
hist(as.numeric(station.duration))
range(as.numeric(station.duration))
summary(as.numeric(station.duration))
median(station.duration)
str(bike)
a<-subset(bike, station.id==c("fe2a5f", "fec8ff"))
a<-subset(bike, bikeid==c("fe2a5f", "fec8ff"))
a<-subset(bike, bikeid %in% c("fe2a5f", "fec8ff"))
dim(a)
a<-subset(bike, start.station.id %in% c("fe2a5f", "fec8ff"))
dim(a)
head(a)
a<-subset(bike, start.station.id | end.station.id %in% c("fe2a5f", "fec8ff"))
a<-subset(bike, start.station.id %in% c("fe2a5f", "fec8ff") | end.station.id %in% c("fe2a5f", "fec8ff"))
dim(a)
head(a)
bike$station.duration<-c(NA, station.duration)
head(bike)
stats<-ddply(bike, id.vars=c("end.station.id", "start.station.id"), numcolwise(mean))
library(plyr)
stats<-ddply(bike, id.vars=c("end.station.id", "start.station.id"), numcolwise(mean))
stats<-ddply(bike, id.vars=c(end.station.id, start.station.id), numcolwise(mean))
?ddply
library(plyr)
stats<-ddply(bike, .(end.station.id, start.station.id), numcolwise(mean))
head(stats)
str(stats)
